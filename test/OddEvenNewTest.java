//// Generated by CodiumAI
//
//import common.BookCharacter;
//import common.SortCorrectnessCheck;
//import org.junit.Test;
//import parallel_bubble_sort.odd_even.OddEvenNew;
//
//import java.io.ByteArrayOutputStream;
//import java.io.PrintStream;
//
//import static org.junit.Assert.*;
//
//public class OddEvenNewTest {
//    // The sort method sorts the given array using the odd-even sort algorithm.
//    @Test
//    public void test_sort_sorts_given_array_using_odd_even_sort_algorithm() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = {new BookCharacter("1", 5), new BookCharacter("2", 3), new BookCharacter("3", 7)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] result = oddEvenNew.sort(arr);
//
//        // Assert
//        assertEquals(3, result.length);
//        assertTrue(SortCorrectnessCheck.check(result));
//    }
//
//    // The sort method returns a sorted array.
//    @Test
//    public void test_sort_returns_sorted_array() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = {new BookCharacter("1", 5), new BookCharacter("2", 3), new BookCharacter("3", 7)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] result = oddEvenNew.sort(arr);
//
//        // Assert
//        assertEquals(3, result.length);
//        assertTrue(SortCorrectnessCheck.check(result));
//    }
//
//
//    // The generateRandomArray method generates a random array of BookCharacter objects.
//    @Test
//    public void test_generateRandomArray_generates_random_array_of_BookCharacter_objects() throws InterruptedException {
//        // Arrange
//        int length = 5;
//
//        // Act
//        BookCharacter[] result = BookCharacter.generateRandomArray(length);
//
//        // Assert
//        assertEquals(length, result.length);
//    }
//
//    // The compareTo method compares two BookCharacter objects based on their height.
//    @Test
//    public void test_compareTo_compares_two_BookCharacter_objects_based_on_height() throws InterruptedException {
//        // Arrange
//        BookCharacter bookCharacter1 = new BookCharacter("1", 5);
//        BookCharacter bookCharacter2 = new BookCharacter("2", 3);
//
//        // Act
//        int result = bookCharacter1.compareTo(bookCharacter2);
//
//        // Assert
//        assertTrue(result > 0);
//    }
//
//    // The equals method checks if two BookCharacter objects have the same height.
//    @Test
//    public void test_equals_checks_if_two_BookCharacter_objects_have_same_height() throws InterruptedException {
//        // Arrange
//        BookCharacter bookCharacter1 = new BookCharacter("1", 5);
//        BookCharacter bookCharacter2 = new BookCharacter("2", 5);
//
//        // Act
//        boolean result = bookCharacter1.equals(bookCharacter2);
//
//        // Assert
//        assertTrue(result);
//    }
//
//    // The given array is null, and the sort method returns null.
//    @Test
//    public void test_sort_returns_null_when_given_array_is_null() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = null;
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] result = oddEvenNew.sort(arr);
//
//        // Assert
//        assertNull(result);
//    }
//
//    // The given array is empty, and the sort method returns the same array.
//    @Test
//    public void test_sort_returns_same_array_when_given_array_is_empty() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[0];
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] result = oddEvenNew.sort(arr);
//
//        // Assert
//        assertSame(arr, result);
//    }
//
//    // The given array contains null elements, and the sort method returns null.
//    @Test
//    public void test_sort_returns_null_when_given_array_contains_null_elements() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = {new BookCharacter("1", 5), null, new BookCharacter("3", 7)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] result = oddEvenNew.sort(arr);
//
//        // Assert
//        assertNull(result);
//    }
//
//    // The height of a BookCharacter object is negative, and an IllegalArgumentException is thrown.
//    @Test
//    public void test_constructor_throws_IllegalArgumentException_when_height_is_negative() throws InterruptedException {
//        // Arrange & Act & Assert
//        assertThrows(IllegalArgumentException.class, () -> new BookCharacter("1", -5));
//    }
//
//    // The oddEvenSort method throws an InterruptedException or BrokenBarrierException.
//    @Test
//    public void test_oddEvenSort_throws_exception() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = {new BookCharacter("1", 5), new BookCharacter("2", 3), new BookCharacter("3", 7)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act & Assert
//        assertThrows(Exception.class, () -> oddEvenNew.sort(arr));
//    }
//
//    // The print method prints the heights of the BookCharacter objects in the given array.
//    @Test
//    public void test_print_prints_heights_of_BookCharacter_objects_in_given_array() throws InterruptedException {
//        // Arrange
//        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
//        System.setOut(new PrintStream(outContent));
//        BookCharacter[] arr = {new BookCharacter("1", 5), new BookCharacter("2", 3), new BookCharacter("3", 7)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        oddEvenNew.print(arr);
//
//        // Assert
//        assertEquals("5 3 7 ", outContent.toString());
//    }
//
//    // The sort method sorts the given array in ascending order of height.
//    @Test
//    public void test_sort_sortsArrayInAscendingOrder() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[]{
//                new BookCharacter("1", 5),
//                new BookCharacter("2", 3),
//                new BookCharacter("3", 7),
//                new BookCharacter("4", 1)
//        };
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        for (int i = 0; i < sortedArr.length - 1; i++) {
//            assertTrue(sortedArr[i].getHeight() <= sortedArr[i + 1].getHeight());
//        }
//    }
//
//    // The sort method returns the same array if it is null.
//    @Test
//    public void test_sort_returnsNullIfArrayIsNull() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = null;
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        assertNull(sortedArr);
//    }
//
//    // The sort method returns the same array if it is empty.
//    @Test
//    public void test_sort_returnsSameArrayIfEmpty() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[0];
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        assertSame(arr, sortedArr);
//    }
//
//    // The sort method returns the same array if it contains only one element.
//    @Test
//    public void test_sort_returnsSameArrayIfContainsOneElement() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[]{new BookCharacter("1", 5)};
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        assertSame(arr, sortedArr);
//    }
//
//    // The sort method returns null if the array contains null elements.
//    @Test
//    public void test_sort_returnsNullIfArrayContainsNullElements() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[]{
//                new BookCharacter("1", 5),
//                null,
//                new BookCharacter("3", 7)
//        };
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        assertNull(sortedArr);
//    }
//
//
//    // The sort method does not modify the original array.
//    @Test
//    public void test_sort_doesNotModifyOriginalArray() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[]{
//                new BookCharacter("1", 5),
//                new BookCharacter("2", 3),
//                new BookCharacter("3", 7),
//                new BookCharacter("4", 1)
//        };
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        oddEvenNew.sort(arr);
//
//        // Assert
//        for (int i = 0; i < arr.length; i++) {
//            assertEquals("Original array should not be modified", "Original", arr[i].getId());
//        }
//    }
//
//    // The sort method sorts the array correctly when multiple threads are used.
//    @Test
//    public void test_sort_sortsArrayCorrectlyWithMultipleThreads() throws InterruptedException {
//        // Arrange
//        BookCharacter[] arr = new BookCharacter[]{
//                new BookCharacter("1", 5),
//                new BookCharacter("2", 3),
//                new BookCharacter("3", 7),
//                new BookCharacter("4", 1)
//        };
//        OddEvenNew oddEvenNew = new OddEvenNew();
//
//        // Act
//        BookCharacter[] sortedArr = oddEvenNew.sort(arr);
//
//        // Assert
//        for (int i = 0; i < sortedArr.length - 1; i++) {
//            assertTrue(sortedArr[i].getHeight() <= sortedArr[i + 1].getHeight());
//        }
//    }
//}